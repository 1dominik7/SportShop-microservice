name: SportShop Backend API Pipeline

on:
  push:
    branches:
      - main
    paths:
      - backend/config/**
      - backend/eureka/**
      - backend/gateway/**
      - backend/marketing/**
      - backend/order/**
      - backend/payment/**
      - backend/product/**
      - backend/user/**
      - backend/docker-compose.yml
      - .github/workflows/*-backend.yml

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [eureka,config,gateway,marketing,order,payment,product,user]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check available directories and permissions
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing contents of /home/runner directory:"
          ls -l /home/runner
          echo "Checking permissions for /home/runner/.ssh folder:"
          ls -ld /home/runner/.ssh || echo ".ssh does not exist"

      - name: Setup SSH for secure scp
        run: |
          echo "Creating ~/.ssh directory"
          mkdir -p /home/runner/.ssh
          echo "Verifying directory creation"
          ls -ld /home/runner/.ssh

          touch /home/runner/.ssh/known_hosts

          echo "Setting up SSH private key"
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/runner/.ssh/id_rsa
          chmod 600 /home/runner/.ssh/id_rsa

          echo "Adding VPS to known hosts"
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> /home/runner/.ssh/known_hosts
          cat /home/runner/.ssh/known_hosts
          
          echo "Changing permissions of known_hosts"
          chmod 600 /home/runner/.ssh/known_hosts

          echo "Verifying contents of ~/.ssh"
          ls -l /home/runner/.ssh 


      - name: Debug SSH connection
        run: |
          ssh -v -i ~/.ssh/id_rsa -p 8000 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} hostname || true

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Make mvnw executable
        run: chmod +x backend/${{ matrix.service }}/mvnw

      # - name: Fetch .env files from VPS
      #   run: |
      #     mkdir -p backend
      #     scp -i ~/.ssh/id_rsa ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:SportShop-microservice/backend/.env backend/.env
      #     scp -i ~/.ssh/id_rsa ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:SportShop-microservice/backend/${{ matrix.service }}/.env backend/${{ matrix.service }}/.env

      # - name: Run tests
      #   run: |
      #     cd backend/${{ matrix.service }}
      #     if [ "${{ matrix.service }}" = "gateway" ] || [ "${{ matrix.service }}" = "eureka" ] || [ "${{ matrix.service }}" = "config" ]; then
      #       ./mvnw package -DskipTests
      #     else
      #       ./mvnw test
      #     fi

      - name: Build project
        run: |
          cd backend/${{ matrix.service }}
          ./mvnw package

      - name: Extract project version
        id: extract_version
        run: |
          cd backend/${{ matrix.service }}
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: backend/${{ matrix.service }}
          file: backend/${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/bsn-${{ matrix.service }}:${{ steps.extract_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/bsn-${{ matrix.service }}:latest

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
     - name: Run deployment script on VPS
       run: |
         scp backend/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/.env

         cd /SportShop-microservice
 
         scp backend/user/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/user/.env
         scp backend/order/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/order/.env
         scp backend/product/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:SportShop-microservice/backend/product/.env
         scp backend/payment/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/payment/.env
         scp backend/marketing/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/marketing/.env
         scp backend/gateway/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/gateway/.env
         scp backend/config/.env ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/SportShop-microservice/backend/config/.env
 
         ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
         source /SportShop-microservice/.env 
         cd /SportShop-microservice
         docker-compose -f docker-compose.yml pull -q
         docker-compose -f docker-compose.yml up -d
         EOF
